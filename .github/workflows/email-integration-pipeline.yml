name: Email Integration Development Pipeline
on:
  push:
    branches: [ main, develop, feature/email-integration-* ]
    paths:
      - 'src/agents/email-integration/**'
      - 'src/email/**'
      - 'docs/project-management/EMAIL-INTEGRATION-*'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/agents/email-integration/**'
      - 'src/email/**'

env:
  NODE_VERSION: '20.x'
  EMAIL_INTEGRATION_PROJECT: 'true'

jobs:
  # Work Package 1.1: Project Initiation & Planning
  project-initiation:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[WP-1.1]') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Requirements Documentation
        run: |
          echo "üîç Validating Project Initiation Requirements..."
          if [ -f "docs/project-management/EMAIL-INTEGRATION-SCOPE-STATEMENT.md" ]; then
            echo "‚úÖ Scope Statement exists"
          else
            echo "‚ùå Missing Scope Statement"
            exit 1
          fi
          
          if [ -f "docs/project-management/EMAIL-INTEGRATION-WBS.md" ]; then
            echo "‚úÖ WBS exists"
          else
            echo "‚ùå Missing WBS"
            exit 1
          fi
          
      - name: Check API Access Configuration
        run: |
          echo "üîß Checking API access configuration..."
          # Validate that environment variables are properly set
          if [ -z "${{ secrets.GMAIL_CLIENT_ID }}" ]; then
            echo "‚ö†Ô∏è Gmail API client ID not configured"
          fi
          if [ -z "${{ secrets.OUTLOOK_CLIENT_ID }}" ]; then
            echo "‚ö†Ô∏è Outlook API client ID not configured"
          fi
          
  # Work Package 1.2: Core Email Integration Development
  core-development:
    runs-on: ubuntu-latest
    needs: project-initiation
    if: contains(github.event.head_commit.message, '[WP-1.2]') || github.event_name == 'pull_request'
    strategy:
      matrix:
        component: [
          'authentication-framework',
          'gmail-integration', 
          'outlook-integration',
          'email-intelligence'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Component-specific Build
        run: |
          echo "üèóÔ∏è Building Email Integration Component: ${{ matrix.component }}"
          case "${{ matrix.component }}" in
            authentication-framework)
              echo "Building OAuth2 Authentication Framework..."
              npm run build:auth
              ;;
            gmail-integration)
              echo "Building Gmail API Integration..."
              npm run build:gmail
              ;;
            outlook-integration)
              echo "Building Outlook Graph API Integration..."
              npm run build:outlook
              ;;
            email-intelligence)
              echo "Building Email Intelligence Engine..."
              npm run build:intelligence
              ;;
          esac
          
      - name: Component Unit Tests
        run: |
          echo "üß™ Running Component Tests: ${{ matrix.component }}"
          case "${{ matrix.component }}" in
            authentication-framework)
              npm run test:auth
              ;;
            gmail-integration)
              npm run test:gmail
              ;;
            outlook-integration)
              npm run test:outlook
              ;;
            email-intelligence)
              npm run test:intelligence
              ;;
          esac
          
      - name: Security Scan
        run: |
          echo "üîí Security scanning for ${{ matrix.component }}..."
          npm audit --audit-level=moderate
          
  # Work Package 1.3: Historical Email Ingestion
  historical-ingestion:
    runs-on: ubuntu-latest
    needs: core-development
    if: contains(github.event.head_commit.message, '[WP-1.3]') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Historical Ingestion Components
        run: |
          echo "üìö Building Historical Email Ingestion Module..."
          npm run build:historical-ingestion
          
      - name: Test Knowledge Base Integration
        run: |
          echo "üß† Testing Knowledge Base Population..."
          npm run test:knowledge-base
          
      - name: Test Distributed Memory Integration
        run: |
          echo "üíæ Testing Distributed Memory Integration..."
          npm run test:distributed-memory
          
      - name: Performance Test - Email Processing
        run: |
          echo "‚ö° Testing Email Processing Performance..."
          npm run test:performance:email-processing
          
  # Work Package 1.4: Advanced Features Development
  advanced-features:
    runs-on: ubuntu-latest
    needs: [core-development, historical-ingestion]
    if: contains(github.event.head_commit.message, '[WP-1.4]') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Advanced Features
        run: |
          echo "üöÄ Building Advanced Email Features..."
          npm run build:advanced-features
          
      - name: Test PEA Agent Integration
        run: |
          echo "ü§ñ Testing PEA Agent Integration..."
          npm run test:pea-integration
          
      - name: Performance Optimization Tests
        run: |
          echo "‚ö° Testing Performance Optimizations..."
          npm run test:performance:optimization
          
  # Work Package 1.5: Security & Compliance
  security-compliance:
    runs-on: ubuntu-latest
    needs: [core-development, historical-ingestion, advanced-features]
    if: contains(github.event.head_commit.message, '[WP-1.5]') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security Framework Tests
        run: |
          echo "üîê Testing Security Framework..."
          npm run test:security:framework
          
      - name: Compliance Validation
        run: |
          echo "üìã Running Compliance Validation..."
          npm run test:compliance:gdpr
          npm run test:compliance:soc2
          
      - name: Encryption Tests
        run: |
          echo "üîí Testing Email Encryption..."
          npm run test:encryption
          
      - name: Security Audit
        run: |
          echo "üõ°Ô∏è Running Security Audit..."
          npm audit --audit-level=high
          
  # Work Package 1.6: Integration Testing
  integration-testing:
    runs-on: ubuntu-latest
    needs: [core-development, historical-ingestion, advanced-features, security-compliance]
    if: contains(github.event.head_commit.message, '[WP-1.6]') || github.event_name == 'pull_request'
    strategy:
      matrix:
        test-suite: [
          'api-integration',
          'pea-system-integration', 
          'performance-testing'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Integration Test Execution
        run: |
          echo "üîó Running Integration Tests: ${{ matrix.test-suite }}"
          case "${{ matrix.test-suite }}" in
            api-integration)
              npm run test:integration:api
              ;;
            pea-system-integration)
              npm run test:integration:pea-system
              ;;
            performance-testing)
              npm run test:performance:load
              ;;
          esac
          
      - name: Generate Test Reports
        if: always()
        run: |
          echo "üìä Generating Test Reports..."
          npm run test:report:${{ matrix.test-suite }}
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}
          path: test-results/
          
  # Work Package 1.7: Documentation & Deployment
  documentation-deployment:
    runs-on: ubuntu-latest
    needs: integration-testing
    if: contains(github.event.head_commit.message, '[WP-1.7]') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate API Documentation
        run: |
          echo "üìö Generating API Documentation..."
          npm run docs:generate
          
      - name: Validate Documentation
        run: |
          echo "‚úÖ Validating Documentation Completeness..."
          npm run docs:validate
          
      - name: Deployment Preparation
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üöÄ Preparing Email Integration for Deployment..."
          npm run build:production
          
      - name: Deploy to Staging
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "üîÑ Deploying to Staging Environment..."
          npm run deploy:staging
          
  # Automated Work Package Tracking
  work-package-tracking:
    runs-on: ubuntu-latest
    if: always()
    needs: [project-initiation, core-development, historical-ingestion, advanced-features, security-compliance, integration-testing, documentation-deployment]
    steps:
      - name: Work Package Progress Tracking
        run: |
          echo "üìä Email Integration Project Progress Tracking"
          echo "============================================="
          
          # Extract work package from commit message
          WP=$(echo "${{ github.event.head_commit.message }}" | grep -o '\[WP-[0-9]\+\.[0-9]\+\]' || echo "")
          
          if [ ! -z "$WP" ]; then
            echo "Current Work Package: $WP"
            
            # Update project status based on completed work packages
            case "$WP" in
              "[WP-1.1]")
                echo "‚úÖ Project Initiation Complete"
                echo "Progress: 12.5% (1/8 phases)"
                ;;
              "[WP-1.2]")
                echo "‚úÖ Core Development Complete"
                echo "Progress: 37.5% (3/8 phases)"
                ;;
              "[WP-1.3]")
                echo "‚úÖ Historical Ingestion Complete"
                echo "Progress: 50.0% (4/8 phases)"
                ;;
              "[WP-1.4]")
                echo "‚úÖ Advanced Features Complete"
                echo "Progress: 62.5% (5/8 phases)"
                ;;
              "[WP-1.5]")
                echo "‚úÖ Security & Compliance Complete"
                echo "Progress: 75.0% (6/8 phases)"
                ;;
              "[WP-1.6]")
                echo "‚úÖ Integration Testing Complete"
                echo "Progress: 87.5% (7/8 phases)"
                ;;
              "[WP-1.7]")
                echo "‚úÖ Documentation & Deployment Complete"
                echo "Progress: 100% (8/8 phases) - PROJECT COMPLETE!"
                ;;
            esac
          fi
          
      - name: Update GitHub Issue
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìù Updating GitHub Issue #36 with progress..."
          # This would update the original issue with current progress
          # Implementation would use GitHub CLI or API
          
  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Code Quality Check
        run: |
          echo "üîç Running Code Quality Checks..."
          npm run lint:email-integration
          npm run typecheck:email-integration
          
      - name: Test Coverage Check
        run: |
          echo "üìä Checking Test Coverage..."
          npm run test:coverage:email-integration
          
          # Require 95% coverage for email integration
          coverage=$(npm run test:coverage:email-integration:summary | grep -o '[0-9]\+%' | head -1 | tr -d '%')
          if [ "$coverage" -lt 95 ]; then
            echo "‚ùå Test coverage below 95%: ${coverage}%"
            exit 1
          else
            echo "‚úÖ Test coverage meets requirement: ${coverage}%"
          fi
          
      - name: Performance Benchmark
        run: |
          echo "‚ö° Running Performance Benchmarks..."
          npm run benchmark:email-integration
          
          # Check if response time is under 75ms
          response_time=$(npm run benchmark:email-integration:response-time | grep -o '[0-9]\+ms' | tr -d 'ms')
          if [ "$response_time" -gt 75 ]; then
            echo "‚ùå Response time above 75ms: ${response_time}ms"
            exit 1
          else
            echo "‚úÖ Response time meets requirement: ${response_time}ms"
          fi