name: Stage Gate Controller
run-name: "Stage Control: ${{ github.event.label.name }} for Issue #${{ github.event.issue.number }}"

on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [opened, synchronize, closed]
  workflow_dispatch:
    inputs:
      force_advance:
        description: 'Force advance all eligible issues'
        required: false
        default: 'false'

env:
  CLAUDE_FLOW_VERSION: "alpha"
  SWARM_PERSISTENCE: "enabled"
  GITHUB_INTEGRATION: "enabled"

jobs:
  stage-gate-check:
    runs-on: ubuntu-latest
    if: startsWith(github.event.label.name, 'stage:')
    
    permissions:
      issues: write
      pull-requests: write
      contents: read
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g @anthropics/claude-flow@alpha

      - name: Stage-Specific Quality Gates
        id: quality-gates
        run: |
          STAGE="${{ github.event.label.name }}"
          echo "Processing stage: $STAGE"
          
          case "$STAGE" in
            "stage:dev")
              echo "ðŸ”§ Running development stage checks..."
              npm run lint || exit 1
              npm run build || exit 1
              npm run test || exit 1
              echo "dev_checks=passed" >> $GITHUB_OUTPUT
              ;;
            "stage:test")
              echo "ðŸ§ª Running testing stage checks..."
              npm run test || exit 1
              npm run coverage || exit 1
              echo "test_checks=passed" >> $GITHUB_OUTPUT
              ;;
            "stage:review")
              echo "ðŸ‘€ Running review stage checks..."
              npm run lint || exit 1
              npm audit --audit-level high || exit 1
              echo "review_checks=passed" >> $GITHUB_OUTPUT
              ;;
            "stage:deploy")
              echo "ðŸš€ Running deployment readiness checks..."
              npm run build || exit 1
              echo "deploy_checks=passed" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "No automated checks for stage: $STAGE"
              echo "stage_checks=none" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Trigger Claude-Flow Hive Mind Orchestration
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          CURRENT_STAGE: ${{ github.event.label.name }}
          QUALITY_STATUS: ${{ steps.quality-gates.outputs.dev_checks || steps.quality-gates.outputs.test_checks || steps.quality-gates.outputs.review_checks || steps.quality-gates.outputs.deploy_checks }}
        run: |
          npx claude-flow@alpha hive-mind spawn "
          MISSION: Intelligent Stage Gate Analysis for Issue #${ISSUE_NUMBER}
          
          CONTEXT:
          - Current Stage: ${CURRENT_STAGE}
          - Quality Checks: ${QUALITY_STATUS}
          - Repository: ${{ github.repository }}
          - Actor: ${{ github.actor }}
          
          OBJECTIVES:
          1. Analyze issue #${ISSUE_NUMBER} current status and stage readiness
          2. Verify all stage-specific criteria are met (code quality, tests, reviews)
          3. Check linked PR status and CI pipeline results
          4. If all criteria passed: advance to next stage label automatically
          5. If criteria failed: post detailed blocker analysis and remediation steps
          6. Update swarm memory with decision rationale for future reference
          7. Generate stage advancement metrics for sprint tracking
          
          DECISION CRITERIA:
          - All automated quality gates must pass
          - Linked PRs must have required approvals
          - No critical security vulnerabilities
          - Test coverage above threshold
          - Performance benchmarks within limits
          
          OUTPUT REQUIREMENTS:
          - Post comprehensive status comment on issue
          - Update stage labels if advancement criteria met
          - Record decision in swarm persistent memory
          - Generate metrics for project dashboard
          
          Execute with full GitHub integration and persistent memory enabled.
          " --claude --github --persist --memory-namespace="repo-${{ github.repository }}"

      - name: Performance Metrics Collection
        if: always()
        run: |
          npx claude-flow@alpha metrics collect --component="stage-control" --issue="${{ github.event.issue.number }}"

  batch-stage-orchestration:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_advance == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Claude-Flow
        run: npm install -g @anthropics/claude-flow@alpha

      - name: Execute Batch Stage Orchestration
        run: |
          npx claude-flow@alpha hive-mind spawn "
          BATCH STAGE ORCHESTRATION MISSION:
          
          Process ALL open issues in repository ${{ github.repository }} with stage labels.
          
          For each issue:
          1. Evaluate current stage requirements
          2. Check PR and CI status
          3. Advance stage if criteria met
          4. Document blockers if criteria not met
          5. Update project board position
          
          Generate comprehensive sprint progress report with:
          - Issues advanced by stage
          - Blocking issues requiring attention  
          - Pipeline health metrics
          - Team productivity insights
          
          Persist all decisions and metrics to swarm memory.
          " --claude --github --persist --batch-mode